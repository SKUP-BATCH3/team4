/*
 * File:   WaW.c
 * Author: User
 *
 * Created on September 24, 2022, 10:52 AM
 */

// PIC18F458 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1H
#pragma config OSC = HS         // Oscillator Selection bits (HS oscillator)
#pragma config OSCS = OFF       // Oscillator System Clock Switch Enable bit (Oscillator system clock switch option is disabled (main oscillator is source))

// CONFIG2L
#pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOR = OFF        // Brown-out Reset Enable bit (Brown-out Reset disabled)
#pragma config BORV = 25        // Brown-out Reset Voltage bits (VBOR set to 2.5V)

// CONFIG2H
#pragma config WDT = OFF        // Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
#pragma config WDTPS = 128      // Watchdog Timer Postscale Select bits (1:128)

// CONFIG4L
#pragma config STVR = OFF       // Stack Full/Underflow Reset Enable bit (Stack Full/Underflow will not cause Reset)
#pragma config LVP = OFF        // Low-Voltage ICSP Enable bit (Low-Voltage ICSP disabled)

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (000200-001FFFh) not code protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) not code protected)
#pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) not code protected)
#pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) not code protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot Block (000000-0001FFh) not code protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000200-001FFFh) not write protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) not write protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) not write protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) not write protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block (000000-0001FFh) not write protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000200-001FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) not protected from Table Reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot Block (000000-0001FFh) not protected from Table Reads executed in other blocks)

#include <xc.h>        		//Header File
#define _XTAL_FREQ 20000000	//Frequency Oscillator in MHz
#define ENABLE 1		//For Enabling
#define DISABLE 0		//For Disabling
int can_read[3];		//Initializing CAN Read Array
void system_init(void)		//System Initialization
{
 INTCONbits.GIE=ENABLE;		//Global Interrupt Enable         
 INTCONbits.PEIE=ENABLE;	//Peripheral Interrupt Enable
}
void can_init(void)		//CAN Initialization
{
    TRISBbits.RB3 = ENABLE;	//CAN Receiver Pin as Enable
    TRISBbits.RB2 = DISABLE;	//CAN Transmitt Pin as Enable
    PIE3bits.RXB0IE = ENABLE;	//CAN Receive Buffer Interrupt Enable
    IPR3bits.RXB0IP = ENABLE;	//CAN Receive Buffer Interrupt Peripheral
    CANCON |=0x80;		//CAN Configuration Mode
    while(CANSTAT !=0x80);  	//Baud Rate is 250khz
    BRGCON1=0xC1;		//To Interpret each Bit in each Register to calculate Baud Rate
    BRGCON2=0xAE;		//To Interpret each Bit in each Register to calculate Baud Rate
    BRGCON3=0x45;		//To Interpret each Bit in each Register to calculate Baud Rate
    CIOCON=0x20;		//CAN Input Output Configuration
    CANCON=0x08;  		//CAN Normal Mode
}
void transmit()			// CAN Transmitt Function
{
 CANCON=0x08;			//CAN Normal Mode
TXB1SIDH=0xff;			//Transmission Buffer Standard Identifier Data High
TXB1SIDL=0x80;			//Transmission Buffer Standard Identifier Data Low
if(LATDbits.LD0==0 && LATDbits.LD1== 0)     //if both switch  off then wiper and washer status will be sending
{
TXB1DLC=0x02;			//Transmission Buffer Data Length Code is 2
TXB1D0=0X70;      		//wiper status
TXB1D1=0X00; 			//Washer Output Control Status
}
else if(LATDbits.LD0==1)         //if switch 1 pressed
{
TXB1DLC=0x02;			//Transmission Buffer Data Length Code is 2
TXB1D0=0X12;      		//battery Monitoring Status
TXB1D1=0X00; 			//battery Monitoring Status
}
else if(LATDbits.LD1==1)  {       //if switch 2 pressed
TXB1DLC=0x02;			//Transmission Buffer Data Length Code is 2
TXB1D0=0X70;      		//fluid tank Monitoring Status
TXB1D1=0X01; 			//Rain Monitoring Status
}
TXB1CON=0x08;			//Transmission Buffer Configuration for Normal Mode
 }

void receive()			// CAN Receive Function
{
 CANCON=0x08;			//CAN Normal Mode
 RXM1SIDH=0xff;			//Receive Buffer Standard Identifier Data High
 RXM1SIDL=0x80;			//Receive Buffer Standard Identifier Data Low
 RXB1DLC=0x08;			//Receive Buffer Data Length Code 
 RXERRCNT=0x08;			//Receive Error Counter
 RXB1CON=0x08;			//Receive Buffer Configuration for Normal Mode
 can_read[0]=RXB0D0;         //1st and 2nd bit
 can_read[1]=RXB0D1;     	//3rd bit
 RXB0CONbits.RXFUL=1;		//Receive buffer contains a received message 
 RXB0CON=0x08; 			//Receive Buffer Configuration for Normal Mode
 
}
void set_baudrate()  		//Baud Rate Function
{
    
        CANCON=0x80;            //CANCON into configuration mode.
        BRGCON1=0xC1;    	//Interpret each Bit in each Register to calculate Baud Rate
        BRGCON2=0xAE;		//To Interpret each Bit in each Register to calculate Baud Rate
        BRGCON3=0x45;		//To Interpret each Bit in each Register to calculate Baud Rate
     
        
        CIOCON=0x20;		//CAN Input Output Configuration
        CANCON=0x00;            //CANCON into normal mode.
        __delay_ms(100); 	// 100 miliseconds Delay
    
}

void mask_set() 		//Mask Set Function
{
    CANCON=0x80;                //CANCON into Configuration mode.
    RXM0SIDL=0x00; 		//Enable acceptance mask 0 standard identifier mask low byte.
    RXM0SIDH=0x00; 		//Enable acceptance mask 0 standard identifier mask high byte.
    CANCON=0x00;   		//CANCON into Normal mode.
    __delay_ms(100);     	// 100 miliseconds Delay
}
void filter_set()		//Filter Set Function
{
    CANCON=0x80;   		//CANCON into Configuration mode.
    RXF0SIDH=0x00; 		//Enable acceptance Filter 0 standard identifier high byte.
    RXF0SIDL=0x00; 		//Enable acceptance Filter 0 standard identifier low byte.
    CANCON=0x00;   		//CANCON into Normal mode.
    __delay_ms(100);    	// 100 miliseconds Delay
}
void led2()			//Function for LED 2
   {
       TRISCbits.RC0=1;    	// Data Direction for Switch1 = 1
       TRISDbits.RD0=0;		// Data direction for LED2 = 0
        if(PORTCbits.RC0==0){	//condition to check switch1 is ON 
           LATDbits.LD0 =1;     //LED2 For front wiper will glow
        }
   else if(PORTCbits.RC0==1){	//condition to check switch1 is OFF
          LATDbits.LD0 = 0;     //LED For front Wiper is turned OFF
        }
}
   void led3()			//Function for LED3
   {
       TRISCbits.RC1=1;      	//Data Direction for Switch2 = 1
        TRISDbits.RD1=0; 	// Data direction for LED3 = 0
        if(PORTCbits.RC1==0){	//condition to check switch2 is ON 
         LATDbits.LD1 = 1;      //LED3 For Rear wiper will glow	
        }
   else if(PORTCbits.RC1==1){	//condition to check switch2 is OFF
          LATDbits.LD1 = 0;     //LED For Rear Wiper is turned OFF
            
        }}
   void warning_lamp(){		//Function for Warning Lamp
    TRISDbits.RD2=0;		// Data direction for LED1 = 0
    LATDbits.LD2=1;             //Warning lamp ON
 if(PORTCbits.RC0==0 || PORTCbits.RC1==0) //SWITCH 1 or SWITCH 2 ON
   {
    LATDbits.LD2=0;		//WARNING LAMP OFF	  
   }
    else			//SWITCH 1 or SWITCH 2 OFF
   {
    LATDbits.LD2=1;		//WARNING LAMP ON
   } 
}
void main(){  			// Main Function
   
    system_init();		//System Initialization
    can_init();			//CAN Initialization
    mask_set();			//Function Call for Mask Set
    filter_set();		//Function Call for Filter Set
    transmit();			//Function for Transmitt 
    receive();			//Function for Receive     
    led2();			//Function for LED 2 
    led3();			//Function for LED 3 
    warning_lamp();		//Function for Warning Lamp
}
